using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Entities;
using Infrastructure;
using Microsoft.EntityFrameworkCore;

namespace Data
{
    public class DataContext : DbContext
    {
        private readonly IPersonAccessor _iPersonAccessor;
        private readonly AuditDataContext _auditDataContext;
        public DataContext(DbContextOptions<DataContext> options, IPersonAccessor iPersonAccessor, AuditDataContext auditDataContext) : base(options)
        {
            _auditDataContext = auditDataContext;
            _iPersonAccessor = iPersonAccessor;

        }
        public override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
        {
            SetInsertUpdateFields();
            var auditEntries = OnBeforeSaveChanges();
            var result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
            await OnAfterSaveChanges(auditEntries);
            return result;
        }

        public override int SaveChanges()
        {
            throw new Exception("user async verision of save changes.");
        }
        private  Task OnAfterSaveChanges(List<AuditEntryDto> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;

            foreach (var auditEntry in auditEntries)
            {

                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                
                 _auditDataContext.Audit.AddAsync(auditEntry.ToAudit());
                 _auditDataContext.SaveChangesAsync();
            }

            return SaveChangesAsync();
        }

        private List<AuditEntryDto> OnBeforeSaveChanges()
        {
            if (_iPersonAccessor.IsPersonAuthenticated())
            {
                var personId = _iPersonAccessor.GetPersonId().ToString();
                ChangeTracker.DetectChanges();
                var auditEntries = new List<AuditEntryDto>();
                foreach (var entry in ChangeTracker.Entries())
                {
                    if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
                        continue;
                    var auditEntry = new AuditEntryDto(entry);
                    auditEntry.TableName = entry.Entity.GetType().Name;
                    auditEntry.PersonId = personId;
                    auditEntries.Add(auditEntry);
                    foreach (var property in entry.Properties)
                    {
                        if (property.IsTemporary)
                        {
                            // value will be generated by the database, get the value after saving
                            auditEntry.TemporaryProperties.Add(property);
                            continue;
                        }
                        string propertyName = property.Metadata.Name;

                        if (property.Metadata.IsPrimaryKey())
                        {
                            auditEntry.KeyValues[propertyName] = property.CurrentValue;
                            continue;
                        }
                        switch (entry.State)
                        {
                            case EntityState.Added:
                                auditEntry.AuditTypeEnum = AuditTypeEnum.Create;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                                break;
                            case EntityState.Deleted:
                                auditEntry.AuditTypeEnum = AuditTypeEnum.Delete;
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                break;
                            case EntityState.Modified:
                                if (property.IsModified)
                                {
                                    auditEntry.ChangedColumns.Add(propertyName);
                                    auditEntry.AuditTypeEnum = AuditTypeEnum.Update;
                                    auditEntry.OldValues[propertyName] = property.OriginalValue;
                                    auditEntry.NewValues[propertyName] = property.CurrentValue;
                                }
                                break;
                        }
                    }
                }
                foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
                {
                    _auditDataContext.Audit.Add(auditEntry.ToAudit());
                }
                return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
            }
            return null;
        }

        private void SetInsertUpdateFields()
        {
            if (_iPersonAccessor.IsPersonAuthenticated())
            {
                var currentDateTime = DateTimeOffset.UtcNow;
                var personId = _iPersonAccessor.GetPersonId();
                foreach (var item in ChangeTracker.Entries().Where(x => x.State == EntityState.Added && x.Entity is BaseEntity))
                {
                    var entity = item.Entity as BaseEntity;
                    entity.InsertDate = currentDateTime;
                    entity.InsertPersonId = personId;
                    entity.UpdateDate = currentDateTime;
                    entity.UpdatePersonId = personId;
                }

                foreach (var item in ChangeTracker.Entries().Where(x => x.State == EntityState.Modified && x.Entity is BaseEntity))
                {
                    var entity = item.Entity as BaseEntity;
                    entity.UpdateDate = currentDateTime;
                    entity.UpdatePersonId = personId;
                    item.Property(nameof(entity.InsertDate)).IsModified = false;
                    item.Property(nameof(entity.InsertPersonId)).IsModified = false;
                }
            }


        }

        public DbSet<ListItem> ListItem { get; set; }
        public DbSet<ListItemCategory> ListItemCategory { get; set; }
        public DbSet<Person> Person { get; set; }

    }
}